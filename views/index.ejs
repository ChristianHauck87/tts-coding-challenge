<!DOCTYPE html>
<html>
<head>
	<title>How to solve TTS Challenge</title>
	<meta charset="utf-8">
	<script src="https://d3js.org/d3.v5.min.js"></script>
	<script src ="https://d3js.org/d3-axis.v1.min.js"></script>
</head>
<body>
<h1>The solution</h1>
	
	<script>
	//defining variables for the bar chart
		var data = 	[<%=students[0].length%>,
					 <%=students[1].length%>, 
					 <%=students[2].length%>, 
					 <%=students[3].length%>, 
					 <%=students[4].length%>, 
					 <%=students[5].length%>
					 ];
		var ageCohorts = ["<=30", "31-35", "36-40", "41-45", "46-50", ">50"];
		var columns = ["Student ID", "First Name", "Last Name", "Age"];
		var margin = {top: 20, bottom: 30, left: 20, right: 20};
		var width = 600 - margin.left - margin.right; 
		var height = 400 - margin.top - margin.bottom;
		var barWidth = width / data.length;
		var barPadding = 5;

		// scales
		var yScale = d3.scaleLinear()
		    .domain([0, d3.max(data)])
		    .range([0, height - margin.top]);

	    /*var xAxisScale = d3.scaleLinear()
	    	.domain([0, width])
	    	.range([0, width]);*/

	    var yAxisScale = d3.scaleLinear()
	    	.domain([0, d3.max(data)])
	    	.range([height - margin.top, 0]);

		// creating drawing area
		var svg = d3.select("body").append("svg")
				.attr("width", width + margin.left + margin.right)
				.attr("height", height + margin.top + margin.bottom);

		// creating the bar chart
		var barChart = svg.selectAll("rect")
		    .data(data)
		    .enter()
		    .append("rect")
    		.attr("y", function(d) {return height - yScale(d);})
    		.attr("height", function(d) {return yScale(d);})
    		.attr("width", barWidth - barPadding)
    		.attr("transform", function (d, i) {
    			var translate = [barWidth * i + margin.left + margin.right, 0]; 
        		return "translate("+ translate +")";
    		})
    		.attr("fill", "#8CC8FA");

		// creating labels
		// labels top
    	var labelstop = svg.selectAll("text.value")
		    .data(data)
		    .enter()
		    .append("text")
		    .attr("class", "value")
		    .text(function(d) {
		        return d;
		    })
		    .attr("y", function(d, i) {
		        return height - yScale(d) - 2;
		    })
		    .attr("x", function(d, i) {
		        return (barWidth * i + margin.left + margin.right) + barWidth / 2 - barPadding;
		    })
		    .attr("text-anchor", "middle")
		    .attr("fill", "#000000");
		    
	    // labels bar bottom
    	var labelsbot = svg.selectAll("text.label")
		    .data(ageCohorts)
		    .enter()
		    .append("text")
		    .attr("class", "label")
		    .text(function(d) {
		        return d;
		    })
		    .attr("y", function() {
		        return height - barPadding;
		    })
		    .attr("x", function(d, i) {
		        return (barWidth * i + margin.left + margin.right) + barWidth / 2 - barPadding;
		    })
		    .attr("text-anchor", "middle")
		    .attr("fill", "#000000");

		    // creating the axes
			var yAxis = d3.axisLeft().scale(yAxisScale);
     
			svg.append("g")
			.attr("transform", "translate(35, 20)")
			.call(yAxis);

			/*var xAxis = d3.axisBottom().scale(xAxisScale);
     
			svg.append("g")
			.attr("transform", "translate(40, 355)")
			.selectAll("text").remove()
			.call(xAxis);*/

		// render table
		// table head
		var table = d3.select("body").append("table");
		var thead = table.append("thead");
		var tbody = table.append("tbody");

		thead.append("tr")
		.selectAll("th")
		.data(columns)
		.enter()
		.append("th")
		.text(function(d, i){return d});

		//table body
		var rows = tbody.selectAll("tr")
		.data(data[0])
		.enter()
		.append("tr");

		var cells = rows.selectAll("td")
		.data(function(row){
			return columns.map(function(columns){
				return{
					columns:columns,
					value:row[columns]
				}
			})
		})
		.enter()
		.append("td")
		.text(function(d, i){
			return d.value;
		})





		</script>
</body>
</html>